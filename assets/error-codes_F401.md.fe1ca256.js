import{_ as a,c as e,o as s,a as l}from"./app.7df73375.js";const f=JSON.parse('{"title":"F401","description":"","frontmatter":{},"headers":[{"level":2,"title":"认领修复目录","slug":"认领修复目录","link":"#认领修复目录","children":[]},{"level":2,"title":"安装 autoflake","slug":"安装-autoflake","link":"#安装-autoflake","children":[]},{"level":2,"title":"使用 autoflake","slug":"使用-autoflake","link":"#使用-autoflake","children":[]},{"level":2,"title":"检查修复是否完成","slug":"检查修复是否完成","link":"#检查修复是否完成","children":[]},{"level":2,"title":"提交修复 PR","slug":"提交修复-pr","link":"#提交修复-pr","children":[]},{"level":2,"title":"额外提交配置 PR","slug":"额外提交配置-pr","link":"#额外提交配置-pr","children":[]}],"relativePath":"error-codes/F401.md"}'),t={name:"error-codes/F401.md"},n=l(`<h1 id="f401" tabindex="-1">F401 <a class="header-anchor" href="#f401" aria-hidden="true">#</a></h1><p>F401 为「<code>module</code> imported but unused」，即引入却未使用的模块，修复方案很简单，如果这些 import 确实是没有必要的，直接删除掉这些 import 即可，否则需要根据情况来处理，比如在该 import 后添加 <code># noqa: F401</code> 来禁用这个错误。</p><p>但由于目前 Paddle 的 F401 存量问题非常多，此前统计共有 6750 处，且遍布基本所有的 Python 代码文件中，手动修复不太现实，建议使用 autoflake 来自动删除这些模块。</p><p>由于直接全量修复发现会出现难以定位的问题，因此计划逐目录来修复这些问题，将 Paddle 目录树划分为若干子目录，对各个目录逐一进行修复。</p><h2 id="认领修复目录" tabindex="-1">认领修复目录 <a class="header-anchor" href="#认领修复目录" aria-hidden="true">#</a></h2><p>在 <a href="https://github.com/orgs/cattidea/projects/4/views/7" target="_blank" rel="noreferrer">F401 project</a> 选择想要修复的目录，在 <code>Assignees</code> 字段处将该目录 assgin 给自己，并将 <code>Status</code> 字段修改为 <code>In Progress</code></p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>一定要认领后再开始修复，否则不同人认领了同一个目录容易发生冲突</p></div><h2 id="安装-autoflake" tabindex="-1">安装 autoflake <a class="header-anchor" href="#安装-autoflake" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">pip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">autoflake</span></span>
<span class="line"></span></code></pre></div><h2 id="使用-autoflake" tabindex="-1">使用 autoflake <a class="header-anchor" href="#使用-autoflake" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">autoflake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--in-place</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--remove-all-unused-imports</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--exclude=__init__.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--ignore-pass-after-docstring</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--recursive</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">target_di</span><span style="color:#A6ACCD;">r</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># &lt;target_dir&gt; 替换成需要删除 F401 的目录</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如</span></span>
<span class="line"><span style="color:#FFCB6B;">autoflake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--in-place</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--remove-all-unused-imports</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--exclude=__init__.py</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--ignore-pass-after-docstring</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--recursive</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./python/paddle/fluid/tests/unittests/collective/</span></span>
<span class="line"></span></code></pre></div><h2 id="检查修复是否完成" tabindex="-1">检查修复是否完成 <a class="header-anchor" href="#检查修复是否完成" aria-hidden="true">#</a></h2><p>修复后需要确认下修复是否成功，首先在 flake8 配置文件 <code>.flake8</code> 中移除修复的目录，之后运行 flake8 命令</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">flake8</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div><p>如果修复相关目录已完成，则此时 flake8 应当是没有任何报错的。</p><p>确认修复成功后恢复 <code>.flake8</code> 文件，将刚刚移除的目录再加回去，该修复 PR 不需要修改配置文件，修改配置文件另外单独提一个 PR。</p><h2 id="提交修复-pr" tabindex="-1">提交修复 PR <a class="header-anchor" href="#提交修复-pr" aria-hidden="true">#</a></h2><p>直接提交 PR 即可，注意应该在 PR 中链接上 <a href="https://github.com/orgs/cattidea/projects/4/views/7" target="_blank" rel="noreferrer">F401 project</a> 修复的 issue，需要使用 <code>fixes</code> 前缀来链接，这样 <a href="https://github.com/orgs/cattidea/projects/4/views/7" target="_blank" rel="noreferrer">F401 project</a> 中的 <code>Linked pull requests</code> 字段会自动链接上相关 PR。</p><p>示例 PR：<a href="https://github.com/PaddlePaddle/Paddle/pull/46615" target="_blank" rel="noreferrer">#46615</a></p><h2 id="额外提交配置-pr" tabindex="-1">额外提交配置 PR <a class="header-anchor" href="#额外提交配置-pr" aria-hidden="true">#</a></h2><p>即是将对 <code>.flake8</code> 的修改单独提一个 PR，该 PR 可使用 <code>test=document_fix</code> 后缀（注意是 commit message 里的后缀，不是 PR 标题后缀）。</p><p>建议一个配置修改 PR 对应多个修复 PR。</p><p>示例 PR：<a href="https://github.com/PaddlePaddle/Paddle/pull/46616" target="_blank" rel="noreferrer">#46616</a></p>`,23),o=[n];function p(r,c,i,d,h,u){return s(),e("div",null,o)}const y=a(t,[["render",p]]);export{f as __pageData,y as default};
