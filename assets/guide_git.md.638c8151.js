import{_ as s,c as a,o as n,a as l}from"./app.7df73375.js";const D=JSON.parse('{"title":"git 常用命令","description":"","frontmatter":{},"headers":[{"level":2,"title":"revert 部分修改过的文件","slug":"revert-部分修改过的文件","link":"#revert-部分修改过的文件","children":[]},{"level":2,"title":"同步上游修改 / 处理冲突","slug":"同步上游修改-处理冲突","link":"#同步上游修改-处理冲突","children":[]},{"level":2,"title":"TODO...","slug":"todo","link":"#todo","children":[]}],"relativePath":"guide/git.md"}'),e={name:"guide/git.md"},p=l(`<h1 id="git-常用命令" tabindex="-1">git 常用命令 <a class="header-anchor" href="#git-常用命令" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里主要补充在引入 flake8 过程中常用的命令，commit、push 等基础命令不再赘述。</p></div><h2 id="revert-部分修改过的文件" tabindex="-1">revert 部分修改过的文件 <a class="header-anchor" href="#revert-部分修改过的文件" aria-hidden="true">#</a></h2><p>即，将修改的文件回撤回 develop 时的状态</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 建议操作之前先 merge 下 upstream/develop</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">filepat</span><span style="color:#A6ACCD;">h</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h2 id="同步上游修改-处理冲突" tabindex="-1">同步上游修改 / 处理冲突 <a class="header-anchor" href="#同步上游修改-处理冲突" aria-hidden="true">#</a></h2><p>这里以上游 repo <a href="https://github.com/PaddlePaddle/Paddle.git" target="_blank" rel="noreferrer">PaddlePaddle/Paddle</a> 和 fork 后的 repo <a href="https://github.com/cattidea/Paddle.git" target="_blank" rel="noreferrer">cattidea/Paddle</a> 为例</p><p>如果一些微小的冲突，可以直接在网页上直接编辑以解决，如果不太方便在网页上解决则需要在本地进行一些操作……</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 首先需要确定设置了远程上游 repo，并将其命名为 upstream</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/PaddlePaddle/Paddle.git</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 确定切回到 develop</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 然后 fetch 上游 repo 的 develop 分支</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upstream</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将上游 develop 最新更改应用到本地 develop 分支</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">upstream/develop</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此时本地 develop 分支已经同步上游 develop 分支，已经是最新的了</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此时可选将本地 develop 分支 push 到自己的 fork repo，如果是在 cattidea 可以不用这一步</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 然后切回自己的分支</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">switch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">branch_nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 将本地 develop 分支合并到自己的分支</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此时如果出现无法自动解决的冲突需要手动解决冲突</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 手动解决冲突之后</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--continue</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此时应该会提示添加 commit message，建议保持默认即可，如果 merge 时添加 \`--no-edit\` 参数（\`git merge develop --no-edit\` ），即为保持默认参数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 此时自己的分支也是最新的了，push 上去就可以发现冲突解决了</span></span>
<span class="line"></span></code></pre></div><h2 id="todo" tabindex="-1">TODO... <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h2>`,10),t=[p];function o(c,r,i,d,y,C){return n(),a("div",null,t)}const A=s(e,[["render",o]]);export{D as __pageData,A as default};
