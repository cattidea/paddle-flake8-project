import{_ as e,c as o,o as l,a}from"./app.7df73375.js";const C=JSON.parse('{"title":"CI 常见问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么鼓励修复 PR 和配置 PR 分离？","slug":"为什么鼓励修复-pr-和配置-pr-分离","link":"#为什么鼓励修复-pr-和配置-pr-分离","children":[]},{"level":2,"title":"应当主要关注哪些 CI 流水线？","slug":"应当主要关注哪些-ci-流水线","link":"#应当主要关注哪些-ci-流水线","children":[]},{"level":2,"title":"TODO...","slug":"todo","link":"#todo","children":[]}],"relativePath":"guide/ci.md"}'),c={name:"guide/ci.md"},t=a(`<h1 id="ci-常见问题" tabindex="-1">CI 常见问题 <a class="header-anchor" href="#ci-常见问题" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这里主要补充在引入 flake8 过程中一些建议的技巧做法，主要是 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/develop/dev_guides/git_guides/paddle_ci_manual_cn.html" target="_blank" rel="noreferrer">Paddle CI 测试详解</a>的一个补充。</p></div><h2 id="为什么鼓励修复-pr-和配置-pr-分离" tabindex="-1">为什么鼓励修复 PR 和配置 PR 分离？ <a class="header-anchor" href="#为什么鼓励修复-pr-和配置-pr-分离" aria-hidden="true">#</a></h2><p>由于多人协作时候经常会出现多个 PR 同时修改同一个文件的情况，在 git 无法自动解决冲突时，必须要手动解决冲突，在发生这种情况时，新提交的 commit 会使所有已有的 approval 都将作废，需要重新过 CI 并找人 approve，然而找人 approve 一般都非常花时间，有时可能要等好几天。</p><p>flake8 小组最可能发生冲突的就是配置文件，在多人协作的过程中可能要经常修改配置文件（删除错误码）以避免增量，如果因为配置文件的冲突重新找 approve 就得不偿失了，会极大影响小组协作的效率。</p><p>因此建议将配置文件分离出去单独做一个 PR，不过同时鼓励一个配置文件的 PR 对应多个修复 PR。</p><p>另外，配置文件的修改可以通过使用 <code>test=document_fix</code> 后缀来仅触发文档相关构建 CI（含 CodeStyle Check），即便发生冲突，解决冲突 + 重新触发 CI 也不过几分钟，对 merge 流程影响很小～</p><div class="tip custom-block"><p class="custom-block-title">小技巧</p><p><code>test=document_fix</code> 需要在 PR 的<strong>最新一次</strong> commit message 里才是有效的，PR 标题是无效的，中间任何一次 commit message 里包含 <code>test=document_fix</code> 也是无效的。</p><p>如果上一个 commit message 忘记加 <code>test=document_fix</code> 也没关系，提交一个空 commit 来触发 document_fix 即可</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--allow-empty</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">empty commit, test=document_fix</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div></div><h2 id="应当主要关注哪些-ci-流水线" tabindex="-1">应当主要关注哪些 CI 流水线？ <a class="header-anchor" href="#应当主要关注哪些-ci-流水线" aria-hidden="true">#</a></h2><p>所有 <code>required</code> 的流水线都需要关注，不过一些流水线需要根据情况判断是否需要关注。</p><ul><li><code>PR-CI-Py3</code> 里会运行大量单测，也是最主要需要关注的 CI</li><li><code>PR-CI-Codestyle-Check</code> 里会运行 pre-commit，如果修改了 pre-commit 相关脚本、配置文件，需要重点关注</li><li><code>PR-CI-Static-Check</code> 里会运行编译 + docstring 示例代码运行、Approval 检查等，所有修改都应该重点关注此流水线，需根据情况处理 <ul><li>docstring 示例代码失败：看是否是因为自己修改导致的，根据情况处理</li><li>Approval 检查失败：看具体情况，如果是避不开的 Approval 需要等 approve</li><li>编译失败：按理说除去修改 yaml codegen 脚本之外，修改 Python 代码应该不会导致编译失败，此时优先尝试 re-run</li></ul></li><li><code>PR-CI-APPROVAL</code> 里会检查 Approval，同上</li></ul><p>近期不太稳定的流水线（10.5 updated）：</p><ul><li><code>PR-CI-NPU</code> 10.1 左右会在 git pull 时因网络问题失败，需要 re-run</li><li><code>PR-CI-Windows</code> 近期持续排队中，需要等工作日修复后 re-run</li><li><code>PR-CI-Windows-Inference</code> 同 <code>PR-CI-Windows</code></li><li><code>PR-CI-Coverage</code><ul><li>近期偶尔会发生 build 失败问题，在这种情况下需要 re-run</li><li>如果是后续单测失败，需要查看问题原因</li><li>如果是覆盖率不够导致失败，需要查看是否是自己修改导致的覆盖率不够，如果不是，等工作日问是否可以豁免</li></ul></li></ul><h2 id="todo" tabindex="-1">TODO... <a class="header-anchor" href="#todo" aria-hidden="true">#</a></h2>`,14),i=[t];function s(d,p,n,r,m,u){return l(),o("div",null,i)}const _=e(c,[["render",s]]);export{C as __pageData,_ as default};
